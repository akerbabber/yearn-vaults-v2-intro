Compilation warnings/errors on StrategyCurveIBVoterProxy.sol:
Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> StrategyCurveIBVoterProxy.sol:1347:26:
     |
1347 |     function tendTrigger(uint256 callCost) public view virtual returns (bool) {
     |                          ^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> StrategyCurveIBVoterProxy.sol:1767:29:
     |
1767 |     function adjustPosition(uint256 _debtOutstanding) internal override {
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> StrategyCurveIBVoterProxy.sol:1809:31:
     |
1809 |     function prepareMigration(address _newStrategy) internal override {
     |                               ^^^^^^^^^^^^^^^^^^^^

Warning: Function state mutability can be restricted to pure
   --> StrategyCurveIBVoterProxy.sol:973:5:
    |
973 |     function delegatedAssets() external view virtual returns (uint256) {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to pure
    --> StrategyCurveIBVoterProxy.sol:1347:5:
     |
1347 |     function tendTrigger(uint256 callCost) public view virtual returns (bool) {
     |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to view
    --> StrategyCurveIBVoterProxy.sol:1845:5:
     |
1845 |     function _optimalPath(uint256 _amount) public returns (address[] memory) {
     |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> StrategyCurveIBVoterProxy.sol:1600:1:
     |
1600 | contract StrategyCurveIBVoterProxy is BaseStrategy {
     | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:[93m
Reentrancy in BaseStrategy.setRewards(address) (StrategyCurveIBVoterProxy.sol#1129-1135):
	External calls:
	- vault.approve(rewards,0) (StrategyCurveIBVoterProxy.sol#1131)
	State variables written after the call(s):
	- rewards = _rewards (StrategyCurveIBVoterProxy.sol#1132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
BaseStrategy.sweep(address).i (StrategyCurveIBVoterProxy.sol#1588) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
BaseStrategy._initialize(address,address,address,address) (StrategyCurveIBVoterProxy.sol#1072-1087) ignores return value by vault.approve(rewards,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1086)
BaseStrategy.setRewards(address) (StrategyCurveIBVoterProxy.sol#1129-1135) ignores return value by vault.approve(rewards,0) (StrategyCurveIBVoterProxy.sol#1131)
BaseStrategy.setRewards(address) (StrategyCurveIBVoterProxy.sol#1129-1135) ignores return value by vault.approve(rewards,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1133)
StrategyCurveIBVoterProxy.constructor(address) (StrategyCurveIBVoterProxy.sol#1651-1682) ignores return value by crv.approve(crvRouter,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1662)
StrategyCurveIBVoterProxy.constructor(address) (StrategyCurveIBVoterProxy.sol#1651-1682) ignores return value by crv.approve(voter,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1663)
StrategyCurveIBVoterProxy.prepareReturn(uint256) (StrategyCurveIBVoterProxy.sol#1716-1765) ignores return value by curveProxy.withdraw(crvIBgauge,address(want),Math.min(balanceOfStaked(),_debtOutstanding)) (StrategyCurveIBVoterProxy.sol#1752-1756)
StrategyCurveIBVoterProxy.liquidatePosition(uint256) (StrategyCurveIBVoterProxy.sol#1774-1794) ignores return value by curveProxy.withdraw(crvIBgauge,address(want),Math.min(balanceOfStaked(),_amountNeeded - wantBal)) (StrategyCurveIBVoterProxy.sol#1782-1786)
StrategyCurveIBVoterProxy._sell(uint256) (StrategyCurveIBVoterProxy.sol#1796-1807) ignores return value by IUniswapV2Router02(crvRouter).swapExactTokensForTokens(_amount,uint256(0),crvPath,address(this),now) (StrategyCurveIBVoterProxy.sol#1800-1806)
StrategyCurveIBVoterProxy.prepareMigration(address) (StrategyCurveIBVoterProxy.sol#1809-1816) ignores return value by curveProxy.withdraw(crvIBgauge,address(want),gaugeTokens) (StrategyCurveIBVoterProxy.sol#1814)
StrategyCurveIBVoterProxy.setCrvRouter(address,address[]) (StrategyCurveIBVoterProxy.sol#1898-1905) ignores return value by crv.approve(crvRouter,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1904)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
StrategyCurveIBVoterProxy.setCrvRouter(address,address[]).router (StrategyCurveIBVoterProxy.sol#1898) lacks a zero-check on :
		- crvRouter = router (StrategyCurveIBVoterProxy.sol#1902)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation[0m
INFO:Detectors:[92m
Reentrancy in BaseStrategy._initialize(address,address,address,address) (StrategyCurveIBVoterProxy.sol#1072-1087):
	External calls:
	- want.safeApprove(_vault,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1082)
	State variables written after the call(s):
	- keeper = _keeper (StrategyCurveIBVoterProxy.sol#1085)
	- rewards = _rewards (StrategyCurveIBVoterProxy.sol#1084)
	- strategist = _strategist (StrategyCurveIBVoterProxy.sol#1083)
Reentrancy in StrategyCurveIBVoterProxy.constructor(address) (StrategyCurveIBVoterProxy.sol#1651-1682):
	External calls:
	- want.safeApprove(address(curveProxy),uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1658)
	- dai.safeApprove(address(crvIBpool),uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1659)
	- usdc.safeApprove(address(crvIBpool),uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1660)
	- usdt.safeApprove(address(crvIBpool),uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1661)
	- crv.approve(crvRouter,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1662)
	- crv.approve(voter,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1663)
	- BaseStrategy(_vault) (StrategyCurveIBVoterProxy.sol#1651)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (StrategyCurveIBVoterProxy.sol#803)
		- want.safeApprove(_vault,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1082)
		- (success,returndata) = target.call{value: weiValue}(data) (StrategyCurveIBVoterProxy.sol#402)
		- vault.approve(rewards,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1086)
	External calls sending eth:
	- BaseStrategy(_vault) (StrategyCurveIBVoterProxy.sol#1651)
		- (success,returndata) = target.call{value: weiValue}(data) (StrategyCurveIBVoterProxy.sol#402)
	State variables written after the call(s):
	- crvPath = crvPathDai (StrategyCurveIBVoterProxy.sol#1681)
	- crvPathDai = new address[](3) (StrategyCurveIBVoterProxy.sol#1666)
	- crvPathDai[0] = address(crv) (StrategyCurveIBVoterProxy.sol#1667)
	- crvPathDai[1] = address(weth) (StrategyCurveIBVoterProxy.sol#1668)
	- crvPathDai[2] = address(dai) (StrategyCurveIBVoterProxy.sol#1669)
	- crvPathUsdc = new address[](3) (StrategyCurveIBVoterProxy.sol#1671)
	- crvPathUsdc[0] = address(crv) (StrategyCurveIBVoterProxy.sol#1672)
	- crvPathUsdc[1] = address(weth) (StrategyCurveIBVoterProxy.sol#1673)
	- crvPathUsdc[2] = address(usdc) (StrategyCurveIBVoterProxy.sol#1674)
	- crvPathUsdt = new address[](3) (StrategyCurveIBVoterProxy.sol#1676)
	- crvPathUsdt[0] = address(crv) (StrategyCurveIBVoterProxy.sol#1677)
	- crvPathUsdt[1] = address(weth) (StrategyCurveIBVoterProxy.sol#1678)
	- crvPathUsdt[2] = address(usdt) (StrategyCurveIBVoterProxy.sol#1679)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in BaseStrategy.harvest() (StrategyCurveIBVoterProxy.sol#1456-1487):
	External calls:
	- debtOutstanding = vault.report(profit,loss,debtPayment) (StrategyCurveIBVoterProxy.sol#1481)
	Event emitted after the call(s):
	- Harvested(profit,loss,debtPayment,debtOutstanding) (StrategyCurveIBVoterProxy.sol#1486)
Reentrancy in BaseStrategy.setEmergencyExit() (StrategyCurveIBVoterProxy.sol#1540-1545):
	External calls:
	- vault.revokeStrategy() (StrategyCurveIBVoterProxy.sol#1542)
	Event emitted after the call(s):
	- EmergencyExitEnabled() (StrategyCurveIBVoterProxy.sol#1544)
Reentrancy in BaseStrategy.setRewards(address) (StrategyCurveIBVoterProxy.sol#1129-1135):
	External calls:
	- vault.approve(rewards,0) (StrategyCurveIBVoterProxy.sol#1131)
	- vault.approve(rewards,uint256(- 1)) (StrategyCurveIBVoterProxy.sol#1133)
	Event emitted after the call(s):
	- UpdatedRewards(_rewards) (StrategyCurveIBVoterProxy.sol#1134)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
BaseStrategy.harvestTrigger(uint256) (StrategyCurveIBVoterProxy.sol#1398-1437) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp.sub(params.lastReport) < minReportDelay (StrategyCurveIBVoterProxy.sol#1410)
	- block.timestamp.sub(params.lastReport) >= maxReportDelay (StrategyCurveIBVoterProxy.sol#1414)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Address.isContract(address) (StrategyCurveIBVoterProxy.sol#305-314) uses assembly
	- INLINE ASM (StrategyCurveIBVoterProxy.sol#312)
Address._functionCallWithValue(address,bytes,uint256,string) (StrategyCurveIBVoterProxy.sol#398-419) uses assembly
	- INLINE ASM (StrategyCurveIBVoterProxy.sol#411-414)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version0.6.12 (StrategyCurveIBVoterProxy.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.11
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (StrategyCurveIBVoterProxy.sol#332-338):
	- (success) = recipient.call{value: amount}() (StrategyCurveIBVoterProxy.sol#336)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (StrategyCurveIBVoterProxy.sol#398-419):
	- (success,returndata) = target.call{value: weiValue}(data) (StrategyCurveIBVoterProxy.sol#402)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Function ICurveFi.get_virtual_price() (StrategyCurveIBVoterProxy.sol#15) is not in mixedCase
Function ICurveFi.add_liquidity(uint256[3],uint256,bool) (StrategyCurveIBVoterProxy.sol#17-22) is not in mixedCase
Parameter ICurveFi.add_liquidity(uint256[3],uint256,bool).min_mint_amount (StrategyCurveIBVoterProxy.sol#20) is not in mixedCase
Parameter ICurveFi.add_liquidity(uint256[3],uint256,bool).use_underlying (StrategyCurveIBVoterProxy.sol#21) is not in mixedCase
Function ICurveFi.remove_liquidity_imbalance(uint256[2],uint256) (StrategyCurveIBVoterProxy.sol#24) is not in mixedCase
Parameter ICurveFi.remove_liquidity_imbalance(uint256[2],uint256).max_burn_amount (StrategyCurveIBVoterProxy.sol#24) is not in mixedCase
Function ICurveFi.remove_liquidity(uint256,uint256[2]) (StrategyCurveIBVoterProxy.sol#26) is not in mixedCase
Function ICurveFi.remove_liquidity_one_coin(uint256,int128,uint256) (StrategyCurveIBVoterProxy.sol#28-32) is not in mixedCase
Parameter ICurveFi.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (StrategyCurveIBVoterProxy.sol#29) is not in mixedCase
Parameter ICurveFi.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (StrategyCurveIBVoterProxy.sol#31) is not in mixedCase
Parameter ICurveFi.exchange(int128,int128,uint256,uint256)._from_amount (StrategyCurveIBVoterProxy.sol#37) is not in mixedCase
Parameter ICurveFi.exchange(int128,int128,uint256,uint256)._min_to_amount (StrategyCurveIBVoterProxy.sol#38) is not in mixedCase
Function ICurveFi.get_dy(int128,int128,uint256) (StrategyCurveIBVoterProxy.sol#43-47) is not in mixedCase
Parameter ICurveFi.get_dy(int128,int128,uint256)._from_amount (StrategyCurveIBVoterProxy.sol#46) is not in mixedCase
Function ICurveFi.calc_token_amount(uint256[3],bool) (StrategyCurveIBVoterProxy.sol#65) is not in mixedCase
Parameter ICurveFi.calc_token_amount(uint256[3],bool).is_deposit (StrategyCurveIBVoterProxy.sol#65) is not in mixedCase
Function ICurveFi.calc_withdraw_one_coin(uint256,int128) (StrategyCurveIBVoterProxy.sol#67) is not in mixedCase
Function IGauge.claim_rewards() (StrategyCurveIBVoterProxy.sol#112) is not in mixedCase
Function IGauge.claimable_tokens(address) (StrategyCurveIBVoterProxy.sol#114) is not in mixedCase
Function IGauge.claimable_reward(address,address) (StrategyCurveIBVoterProxy.sol#116) is not in mixedCase
Function IUniswapV2Router01.WETH() (StrategyCurveIBVoterProxy.sol#126) is not in mixedCase
Parameter BaseStrategy.setStrategist(address)._strategist (StrategyCurveIBVoterProxy.sol#1096) is not in mixedCase
Parameter BaseStrategy.setKeeper(address)._keeper (StrategyCurveIBVoterProxy.sol#1115) is not in mixedCase
Parameter BaseStrategy.setRewards(address)._rewards (StrategyCurveIBVoterProxy.sol#1129) is not in mixedCase
Parameter BaseStrategy.setMinReportDelay(uint256)._delay (StrategyCurveIBVoterProxy.sol#1149) is not in mixedCase
Parameter BaseStrategy.setMaxReportDelay(uint256)._delay (StrategyCurveIBVoterProxy.sol#1166) is not in mixedCase
Parameter BaseStrategy.setProfitFactor(uint256)._profitFactor (StrategyCurveIBVoterProxy.sol#1181) is not in mixedCase
Parameter BaseStrategy.setDebtThreshold(uint256)._debtThreshold (StrategyCurveIBVoterProxy.sol#1199) is not in mixedCase
Parameter BaseStrategy.setMetadataURI(string)._metadataURI (StrategyCurveIBVoterProxy.sol#1212) is not in mixedCase
Parameter BaseStrategy.withdraw(uint256)._amountNeeded (StrategyCurveIBVoterProxy.sol#1497) is not in mixedCase
Parameter BaseStrategy.migrate(address)._newStrategy (StrategyCurveIBVoterProxy.sol#1523) is not in mixedCase
Parameter BaseStrategy.sweep(address)._token (StrategyCurveIBVoterProxy.sol#1583) is not in mixedCase
Parameter StrategyCurveIBVoterProxy.prepareReturn(uint256)._debtOutstanding (StrategyCurveIBVoterProxy.sol#1716) is not in mixedCase
Parameter StrategyCurveIBVoterProxy.liquidatePosition(uint256)._amountNeeded (StrategyCurveIBVoterProxy.sol#1774) is not in mixedCase
Function StrategyCurveIBVoterProxy._optimalWant(uint256) (StrategyCurveIBVoterProxy.sol#1832-1842) is not in mixedCase
Parameter StrategyCurveIBVoterProxy._optimalWant(uint256)._amount (StrategyCurveIBVoterProxy.sol#1832) is not in mixedCase
Function StrategyCurveIBVoterProxy._optimalPath(uint256) (StrategyCurveIBVoterProxy.sol#1845-1855) is not in mixedCase
Parameter StrategyCurveIBVoterProxy._optimalPath(uint256)._amount (StrategyCurveIBVoterProxy.sol#1845) is not in mixedCase
Function StrategyCurveIBVoterProxy._estimateCrvPrices(uint256) (StrategyCurveIBVoterProxy.sol#1858-1889) is not in mixedCase
Parameter StrategyCurveIBVoterProxy._estimateCrvPrices(uint256)._amount (StrategyCurveIBVoterProxy.sol#1858) is not in mixedCase
Parameter StrategyCurveIBVoterProxy.setProxy(address)._proxy (StrategyCurveIBVoterProxy.sol#1893) is not in mixedCase
Parameter StrategyCurveIBVoterProxy.setCrvRouter(address,address[])._path (StrategyCurveIBVoterProxy.sol#1898) is not in mixedCase
Parameter StrategyCurveIBVoterProxy.setOptimizePath(bool)._toOptimize (StrategyCurveIBVoterProxy.sol#1907) is not in mixedCase
Constant StrategyCurveIBVoterProxy.crvIBgauge (StrategyCurveIBVoterProxy.sol#1610-1611) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StrategyCurveIBVoterProxy.voter (StrategyCurveIBVoterProxy.sol#1612-1613) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (StrategyCurveIBVoterProxy.sol#131) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (StrategyCurveIBVoterProxy.sol#132)
Variable StrategyCurveIBVoterProxy.crvPathUsdc (StrategyCurveIBVoterProxy.sol#1617) is too similar to StrategyCurveIBVoterProxy.crvPathUsdt (StrategyCurveIBVoterProxy.sol#1618)
Variable StrategyCurveIBVoterProxy._estimateCrvPrices(uint256).tokenUsdcDeposit (StrategyCurveIBVoterProxy.sol#1881-1882) is too similar to StrategyCurveIBVoterProxy._estimateCrvPrices(uint256).tokenUsdtDeposit (StrategyCurveIBVoterProxy.sol#1883-1884)
Variable StrategyCurveIBVoterProxy.prepareReturn(uint256).usdcBalance (StrategyCurveIBVoterProxy.sol#1737) is too similar to StrategyCurveIBVoterProxy.prepareReturn(uint256).usdtBalance (StrategyCurveIBVoterProxy.sol#1738)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar[0m
INFO:Detectors:[92m
StrategyCurveIBVoterProxy (StrategyCurveIBVoterProxy.sol#1600-1910) does not implement functions:
	- BaseStrategy.adjustPosition(uint256) (StrategyCurveIBVoterProxy.sol#1310)
	- BaseStrategy.estimatedTotalAssets() (StrategyCurveIBVoterProxy.sol#1252)
	- BaseStrategy.liquidatePosition(uint256) (StrategyCurveIBVoterProxy.sol#1324-1327)
	- BaseStrategy.prepareMigration(address) (StrategyCurveIBVoterProxy.sol#1512)
	- BaseStrategy.prepareReturn(uint256) (StrategyCurveIBVoterProxy.sol#1292-1299)
	- BaseStrategy.protectedTokens() (StrategyCurveIBVoterProxy.sol#1564)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unimplemented-functions[0m
INFO:Detectors:[92m
StrategyCurveIBVoterProxy.uniswapRouter (StrategyCurveIBVoterProxy.sol#1605) is never used in StrategyCurveIBVoterProxy (StrategyCurveIBVoterProxy.sol#1600-1910)
StrategyCurveIBVoterProxy.sushiswapRouter (StrategyCurveIBVoterProxy.sol#1606-1607) is never used in StrategyCurveIBVoterProxy (StrategyCurveIBVoterProxy.sol#1600-1910)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
StrategyCurveIBVoterProxy.keepCRV (StrategyCurveIBVoterProxy.sol#1619) should be constant
StrategyCurveIBVoterProxy.sushiswapRouter (StrategyCurveIBVoterProxy.sol#1606-1607) should be constant
StrategyCurveIBVoterProxy.uniswapRouter (StrategyCurveIBVoterProxy.sol#1605) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
apiVersion() should be declared external:
	- BaseStrategy.apiVersion() (StrategyCurveIBVoterProxy.sol#946-948)
isActive() should be declared external:
	- BaseStrategy.isActive() (StrategyCurveIBVoterProxy.sol#1262-1266)
tendTrigger(uint256) should be declared external:
	- BaseStrategy.tendTrigger(uint256) (StrategyCurveIBVoterProxy.sol#1347-1352)
harvestTrigger(uint256) should be declared external:
	- BaseStrategy.harvestTrigger(uint256) (StrategyCurveIBVoterProxy.sol#1398-1437)
balanceOfUnclaimedReward() should be declared external:
	- StrategyCurveIBVoterProxy.balanceOfUnclaimedReward() (StrategyCurveIBVoterProxy.sol#1700-1702)
_optimalWant(uint256) should be declared external:
	- StrategyCurveIBVoterProxy._optimalWant(uint256) (StrategyCurveIBVoterProxy.sol#1832-1842)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:StrategyCurveIBVoterProxy.sol analyzed (14 contracts with 72 detectors), 86 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
